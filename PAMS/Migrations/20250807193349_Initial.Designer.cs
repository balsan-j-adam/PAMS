// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PAMS.Database;

#nullable disable

namespace PAMS.Migrations
{
    [DbContext(typeof(Mycontext))]
    [Migration("20250807193349_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PAMS.Models.Add_checklists", b =>
                {
                    b.Property<int>("Checklist_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Checklist_dept_id")
                        .HasColumnType("int");

                    b.Property<string>("Checklist_question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Checklist_id");

                    b.HasIndex("Checklist_dept_id");

                    b.ToTable("Add_checklists");
                });

            modelBuilder.Entity("PAMS.Models.All_audit_universe", b =>
                {
                    b.Property<int>("Audit_Universe_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Audit_Universe_Dept_Id")
                        .HasColumnType("int");

                    b.Property<string>("Audit_Universe_Impact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Audit_Universe_Risk_Id")
                        .HasColumnType("int");

                    b.Property<int>("Audit_Universe_Risk_ratio")
                        .HasColumnType("int");

                    b.Property<string>("Audit_Universe_Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Audit_Universe_likelihood")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Audit_Universe_Id");

                    b.HasIndex("Audit_Universe_Dept_Id");

                    b.HasIndex("Audit_Universe_Risk_Id");

                    b.ToTable("All_Audit_universes");
                });

            modelBuilder.Entity("PAMS.Models.All_departments", b =>
                {
                    b.Property<int>("Department_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Department_Id");

                    b.ToTable("All_departments");
                });

            modelBuilder.Entity("PAMS.Models.All_positions", b =>
                {
                    b.Property<int>("Position_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Position_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Position_Id");

                    b.ToTable("All_positions");
                });

            modelBuilder.Entity("PAMS.Models.All_users", b =>
                {
                    b.Property<int>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("User_Position_id")
                        .HasColumnType("int");

                    b.Property<string>("User_Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("User_department_id")
                        .HasColumnType("int");

                    b.Property<string>("User_email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("User_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("User_pass")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("User_id");

                    b.HasIndex("User_Position_id");

                    b.HasIndex("User_department_id");

                    b.ToTable("All_users");
                });

            modelBuilder.Entity("PAMS.Models.Assign_Audit", b =>
                {
                    b.Property<int>("Audit_Assign_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Audit_Assign_Objective")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Audit_Assign_auditor_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Audit_Assign_end_date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Audit_Assign_start_date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Audit_Assign_uni_id")
                        .HasColumnType("int");

                    b.Property<string>("Audit_status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Audit_Assign_id");

                    b.HasIndex("Audit_Assign_auditor_id");

                    b.HasIndex("Audit_Assign_uni_id");

                    b.ToTable("Audit_Assigns_all");
                });

            modelBuilder.Entity("PAMS.Models.Audit_questions", b =>
                {
                    b.Property<int>("Audit_Questions_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AuditId")
                        .HasColumnType("int");

                    b.Property<int?>("Checklist_Id")
                        .HasColumnType("int");

                    b.HasKey("Audit_Questions_Id");

                    b.HasIndex("AuditId");

                    b.HasIndex("Checklist_Id");

                    b.ToTable("Audit_questions");
                });

            modelBuilder.Entity("PAMS.Models.Risk_Categories", b =>
                {
                    b.Property<int>("Risk_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Risk_Category_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Risk_Id");

                    b.ToTable("Risk_Categories");
                });

            modelBuilder.Entity("PAMS.Models.Task_response", b =>
                {
                    b.Property<int>("Response_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Response_AuditeeId")
                        .HasColumnType("int");

                    b.Property<string>("Response_EvidenceFilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Response_Finding")
                        .HasColumnType("longtext");

                    b.Property<int>("Response_TaskId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Response_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Task_Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Response_Id");

                    b.HasIndex("Response_AuditeeId");

                    b.HasIndex("Response_TaskId");

                    b.ToTable("task_Responses");
                });

            modelBuilder.Entity("PAMS.Models.all_assign_task", b =>
                {
                    b.Property<int>("all_task_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Assigned_date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Due_date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("task_Assign_AuditorId")
                        .HasColumnType("int");

                    b.Property<int>("task_Audit_Id")
                        .HasColumnType("int");

                    b.Property<int>("task_QuestionId")
                        .HasColumnType("int");

                    b.HasKey("all_task_id");

                    b.HasIndex("task_Assign_AuditorId");

                    b.HasIndex("task_Audit_Id");

                    b.HasIndex("task_QuestionId");

                    b.ToTable("Audit_tasks");
                });

            modelBuilder.Entity("PAMS.Models.Add_checklists", b =>
                {
                    b.HasOne("PAMS.Models.All_departments", "Departments")
                        .WithMany("Checklists")
                        .HasForeignKey("Checklist_dept_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("PAMS.Models.All_audit_universe", b =>
                {
                    b.HasOne("PAMS.Models.All_departments", "Departments")
                        .WithMany("AuditsUnivers")
                        .HasForeignKey("Audit_Universe_Dept_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PAMS.Models.Risk_Categories", "Risks")
                        .WithMany("AuditsUnivers")
                        .HasForeignKey("Audit_Universe_Risk_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Risks");
                });

            modelBuilder.Entity("PAMS.Models.All_users", b =>
                {
                    b.HasOne("PAMS.Models.All_positions", "Positions")
                        .WithMany("Users")
                        .HasForeignKey("User_Position_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PAMS.Models.All_departments", "Departments")
                        .WithMany("Users")
                        .HasForeignKey("User_department_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Departments");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("PAMS.Models.Assign_Audit", b =>
                {
                    b.HasOne("PAMS.Models.All_users", "All_Users")
                        .WithMany()
                        .HasForeignKey("Audit_Assign_auditor_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PAMS.Models.All_audit_universe", "Audit_Universe")
                        .WithMany()
                        .HasForeignKey("Audit_Assign_uni_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("All_Users");

                    b.Navigation("Audit_Universe");
                });

            modelBuilder.Entity("PAMS.Models.Audit_questions", b =>
                {
                    b.HasOne("PAMS.Models.Assign_Audit", "Audit")
                        .WithMany("Assigned_Questions")
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PAMS.Models.Add_checklists", "Checklist")
                        .WithMany()
                        .HasForeignKey("Checklist_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Audit");

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("PAMS.Models.Task_response", b =>
                {
                    b.HasOne("PAMS.Models.All_users", "Auditee")
                        .WithMany()
                        .HasForeignKey("Response_AuditeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PAMS.Models.all_assign_task", "Task")
                        .WithMany("Tasks")
                        .HasForeignKey("Response_TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auditee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("PAMS.Models.all_assign_task", b =>
                {
                    b.HasOne("PAMS.Models.All_users", "All_userss")
                        .WithMany()
                        .HasForeignKey("task_Assign_AuditorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PAMS.Models.Assign_Audit", "Assign_Audits")
                        .WithMany()
                        .HasForeignKey("task_Audit_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PAMS.Models.Audit_questions", "Audit_Questionss")
                        .WithMany()
                        .HasForeignKey("task_QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("All_userss");

                    b.Navigation("Assign_Audits");

                    b.Navigation("Audit_Questionss");
                });

            modelBuilder.Entity("PAMS.Models.All_departments", b =>
                {
                    b.Navigation("AuditsUnivers");

                    b.Navigation("Checklists");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PAMS.Models.All_positions", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PAMS.Models.Assign_Audit", b =>
                {
                    b.Navigation("Assigned_Questions");
                });

            modelBuilder.Entity("PAMS.Models.Risk_Categories", b =>
                {
                    b.Navigation("AuditsUnivers");
                });

            modelBuilder.Entity("PAMS.Models.all_assign_task", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
